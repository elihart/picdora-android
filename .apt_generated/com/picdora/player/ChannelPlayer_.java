//
// DO NOT EDIT THIS FILE, IT HAS BEEN GENERATED USING AndroidAnnotations 3.0.
//


package com.picdora.player;

import android.app.Activity;
import android.content.Context;
import android.os.Handler;
import android.os.Looper;
import android.util.Log;
import com.picdora.ChannelHelper.OnImageCountReadyListener;
import com.picdora.ChannelHelper.OnImageRequestReady;
import com.picdora.models.Channel;
import com.picdora.player.ChannelPlayer.ChannelError;
import org.androidannotations.api.BackgroundExecutor;

public final class ChannelPlayer_
    extends ChannelPlayer
{

    private Context context_;
    private Handler handler_ = new Handler(Looper.getMainLooper());

    private ChannelPlayer_(Context context) {
        context_ = context;
        init_();
    }

    public static ChannelPlayer_ getInstance_(Context context) {
        return new ChannelPlayer_(context);
    }

    private void init_() {
        if (context_ instanceof Activity) {
            activity = ((Activity) context_);
        } else {
            Log.w("ChannelPlayer_", (("Due to Context class "+ context_.getClass().getSimpleName())+", the @RootContext Activity won't be populated"));
        }
    }

    public void rebind(Context context) {
        context_ = context;
        init_();
    }

    @Override
    public void requestImagesFromServer(final OnImageRequestReady listener) {
        handler_.post(new Runnable() {


            @Override
            public void run() {
                ChannelPlayer_.super.requestImagesFromServer(listener);
            }

        }
        );
    }

    @Override
    public void getServerImageCount(final OnImageCountReadyListener onImageCountReadyListener) {
        handler_.post(new Runnable() {


            @Override
            public void run() {
                ChannelPlayer_.super.getServerImageCount(onImageCountReadyListener);
            }

        }
        );
    }

    @Override
    public void loadFinished(final boolean successful, final ChannelError error) {
        handler_.post(new Runnable() {


            @Override
            public void run() {
                ChannelPlayer_.super.loadFinished(successful, error);
            }

        }
        );
    }

    @Override
    public void handleImageRequestResult(final boolean successful) {
        BackgroundExecutor.execute(new BackgroundExecutor.Task("", 0, "") {


            @Override
            public void execute() {
                try {
                    ChannelPlayer_.super.handleImageRequestResult(successful);
                } catch (Throwable e) {
                    Thread.getDefaultUncaughtExceptionHandler().uncaughtException(Thread.currentThread(), e);
                }
            }

        }
        );
    }

    @Override
    public void loadChannelAsync(final Channel channel) {
        BackgroundExecutor.execute(new BackgroundExecutor.Task("", 0, "") {


            @Override
            public void execute() {
                try {
                    ChannelPlayer_.super.loadChannelAsync(channel);
                } catch (Throwable e) {
                    Thread.getDefaultUncaughtExceptionHandler().uncaughtException(Thread.currentThread(), e);
                }
            }

        }
        );
    }

    @Override
    public void afterServerImageCount() {
        BackgroundExecutor.execute(new BackgroundExecutor.Task("", 0, "") {


            @Override
            public void execute() {
                try {
                    ChannelPlayer_.super.afterServerImageCount();
                } catch (Throwable e) {
                    Thread.getDefaultUncaughtExceptionHandler().uncaughtException(Thread.currentThread(), e);
                }
            }

        }
        );
    }

}
